package com.midea.fridgesettings

import android.app.AlertDialog
import android.app.ProgressDialog
import android.content.Context
import android.content.Intent
import android.graphics.Color
import android.media.AudioManager
import android.media.SoundPool
import android.os.Bundle
import android.support.v7.app.AppCompatActivity
import android.text.TextUtils
import android.util.Log
import android.view.Gravity
import android.view.View
import com.midea.fridge.utils.config.FridgeConfigUtil
import com.midea.fridge.utils.fridgecontrolutil.FridgeControlUtil
import com.midea.fridge.utils.fridgecontrolutil.FridgeExtendStatus
import com.midea.fridge.utils.fridgecontrolutil.FridgeStatus
import com.midea.fridge.utils.fridgecontrolutil.OnControlListener
import com.midea.fridgesettings.view.SwitchEntry
import kotlinx.android.synthetic.main.activity_developer.*
import org.jetbrains.anko.textColor
import org.jetbrains.anko.toast
import java.lang.ref.WeakReference
import java.net.NetworkInterface
import java.net.SocketException
import java.util.*


class DeveloperActivity : AppCompatActivity() {
    private val TAG = "DeveloperActivity"
    private val loadDialog: ProgressDialog by lazy { ProgressDialog(this) }
    private var isDefAll: Boolean = false
    private var isDefFreeze: Boolean = false
    private var isDefCool: Boolean = false
    private var isDefVary: Boolean = false
    private var isForceRun: Boolean = false
    private var isDisplay: Boolean = false
    private val soundPool: SoundPool by lazy { SoundPool(1, AudioManager.STREAM_MUSIC, 100) }
    private var soundId: Int = 0

    private val onControlListener = ExtendStatusListener(this)

    inner class ExtendStatusListener(activity: DeveloperActivity) : OnControlListener<FridgeExtendStatus> {

        val weakR = WeakReference<DeveloperActivity>(activity)

        override fun onControlResponse(t: FridgeExtendStatus) {
            weakR.get() ?: return
            Log.d(TAG, "ExtendStatusListener onControlResponse")
            isDefAll = t.isForceDefrostingAll
            isDefFreeze = t.isForceDefrostingFreeze
            isDefCool = t.isForceDefrostingCool
            isDefVary = t.isForceDefrostingVary
            isForceRun = t.isForceRun
            refreshSwitch()
            dismissProgressDialog()
        }

        override fun onControlTimeout() {
            weakR.get() ?: return
            Log.d(TAG, "ExtendStatusListener onControlTimeout")
            dismissProgressDialog()
        }

        override fun onControlException() {
            weakR.get() ?: return
            Log.d(TAG, "ExtendStatusListener onControlException")
            dismissProgressDialog()
        }

    }

    private val onFridgeListener = FridgeStatusListener(this)

    inner class FridgeStatusListener(activity: DeveloperActivity) : OnControlListener<FridgeStatus> {

        val weakR = WeakReference<DeveloperActivity>(activity)

        override fun onControlResponse(t: FridgeStatus?) {
            weakR.get() ?: return
            Log.d(TAG, "FridgeStatusListener onControlResponse")
            isDisplay = t?.isShowMode ?: false
            displayMode.switch.isChecked = isDisplay
            playVoice()
            dismissProgressDialog()
        }

        override fun onControlTimeout() {
            weakR.get() ?: return
            Log.d(TAG, "FridgeStatusListener onControlTimeout")
            dismissProgressDialog()
        }

        override fun onControlException() {
            weakR.get() ?: return
            Log.d(TAG, "FridgeStatusListener onControlException")
            dismissProgressDialog()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_developer)
        initViewAndEvent()
    }

    override fun onResume() {
        super.onResume()
        refreshSwitch()
    }

    fun devRefresh(view: View){
        FridgeControlUtil.getInstance().queryFridgeExtendStatus(onControlListener)
    }

    private fun initViewAndEvent() {
        showProgressDialog("")
        initSwitch(forceRun, "强制运行")
        initSwitch(defrostingALL, "强制全室化霜")
        initSwitch(defrostingFreeze, "强制冷冻室化霜")
        initSwitch(defrostingCool, "强制冷藏室化霜")
        initSwitch(defrostingVary, "强制变温室化霜")
        initSwitch(displayMode, "商演模式")

        if (FridgeConfigUtil.getInstance().varyRoomNum == 0) {
            defrostingVary.visibility = View.GONE
        }

        if (FridgeConfigUtil.getInstance().fullName == "BCD-543WKZM(E)") {
            defrostingFreeze.visibility = View.GONE
            defrostingCool.visibility = View.GONE
            defrostingVary.visibility = View.GONE
        }

        tvMac.text = getMacAddress()
        soundId = soundPool.load(this, R.raw.beep, 1)
        FridgeControlUtil.getInstance().queryFridgeExtendStatus(onControlListener)
        FridgeControlUtil.getInstance().queryFridgeStatus(onFridgeListener)
    }

    private fun initSwitch(view: SwitchEntry, str: String) {
        with(view) {
            tvTitle.textSize = 24f
            tvTitle.textColor = Color.rgb(103, 107, 108)
            tvTitle.text = str
            switch.setOnCheckedChangeListener { _, isCheck ->
                showProgressDialog("")
                onSwitchChange(view, isCheck)
            }
        }
    }

    private fun refreshSwitch() {
        defrostingALL.switch.isChecked = isDefAll
        defrostingFreeze.switch.isChecked = isDefFreeze
        defrostingCool.switch.isChecked = isDefCool
        defrostingVary.switch.isChecked = isDefVary
    }

    private fun onSwitchChange(view: SwitchEntry, isCheck: Boolean) {
        when (view.id) {
            R.id.forceRun -> {
                if (isCheck == isForceRun) {
                    dismissProgressDialog()
                    return
                }
                if (isDefAll || isDefFreeze || isDefCool || isDefVary) {
                    toast("关闭强制化霜后，才能进行此操作")
                    view.switch.isChecked = false
                    dismissProgressDialog()
                } else {
                    if (isForceRun) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener)
                    } else {
                        FridgeControlUtil.getInstance().forceRun(onControlListener)
                    }
                }
            }

            R.id.defrostingALL -> {
                if (isCheck == isDefAll) {
                    dismissProgressDialog()
                    return
                }
                if (isForceRun) {
                    toast("关闭强制运行后，才能进行此操作")
                    view.switch.isChecked = false
                    dismissProgressDialog()
                } else {
                    if (isDefAll) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener)
                    } else {
                        FridgeControlUtil.getInstance().forceDefrosting(32, onControlListener)
                    }
                }
            }

            R.id.defrostingFreeze -> {
                if (isCheck == isDefFreeze) {
                    dismissProgressDialog()
                    return
                }
                if (isForceRun) {
                    toast("关闭强制运行后，才能进行此操作")
                    view.switch.isChecked = false
                    dismissProgressDialog()
                } else {
                    if (isDefFreeze) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener)
                    } else {
                        FridgeControlUtil.getInstance().forceDefrosting(4, onControlListener)
                    }
                }
            }

            R.id.defrostingCool -> {
                if (isCheck == isDefCool) {
                    dismissProgressDialog()
                    return
                }
                if (isForceRun) {
                    toast("关闭强制运行后，才能进行此操作")
                    view.switch.isChecked = false
                    dismissProgressDialog()
                } else {
                    if (isDefCool) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener)
                    } else {
                        FridgeControlUtil.getInstance().forceDefrosting(8, onControlListener)
                    }
                }
            }

            R.id.defrostingVary -> {
                if (isCheck == isDefVary) {
                    dismissProgressDialog()
                    return
                }
                if (isForceRun) {
                    toast("关闭强制运行后，才能进行此操作")
                    view.switch.isChecked = false
                    dismissProgressDialog()
                } else {
                    if (isDefVary) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener)
                    } else {
                        FridgeControlUtil.getInstance().forceDefrosting(16, onControlListener)
                    }
                }
            }

            R.id.displayMode -> {
                if (isCheck == isDisplay) {
                    dismissProgressDialog()
                    return
                }
                if (isDisplay) {
                    FridgeControlUtil.getInstance().setShow(0, onFridgeListener)
                } else {
                    FridgeControlUtil.getInstance().setShow(1, onFridgeListener)
                }
            }

            else -> {
                dismissProgressDialog()
            }
        }
    }

    fun back(view: View) {
        if (isDefAll || isDefFreeze || isDefCool || isDefVary) {
            showDialog("强制化霜", false)
        } else if (isForceRun) {
            showDialog("强制运行", false)
        } else {
            onBackPressed()
        }
    }

    /**
     * MAC Address
     *
     * return String
     */
    private fun getMacAddress(): String {
        val macAddress: String?
        val buf = StringBuffer()
        var networkInterface: NetworkInterface?
        try {
            networkInterface = NetworkInterface.getByName("eth1")
            if (networkInterface == null) {
                networkInterface = NetworkInterface.getByName("wlan0")
            }
            if (networkInterface == null) {
                return "02:00:00:00:00:02"
            }
            val address = networkInterface.hardwareAddress
            for (b in address) {
                buf.append(String.format("%02X:", b))
            }
            if (buf.isNotEmpty()) {
                buf.deleteCharAt(buf.length - 1)
            }
            macAddress = buf.toString()
        } catch (e: SocketException) {
            e.printStackTrace()
            return "02:00:00:00:00:02"
        }

        return macAddress
    }

    private fun showDialog(message: String, home: Boolean) {
        val builder = AlertDialog.Builder(this)
        builder.setMessage("确认退出吗？如果退出则停止" + message)
        builder.setTitle("提示")
        builder.setPositiveButton("确认") { dialog, _ ->
            FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener)
            dialog.dismiss()
            if (home) {
                val i = Intent(Intent.ACTION_MAIN)
                i.flags = Intent.FLAG_ACTIVITY_NEW_TASK
                i.addCategory(Intent.CATEGORY_HOME)
                startActivity(i)
            }
            finish()
        }
        builder.setNegativeButton("取消") { dialog, _ -> dialog.dismiss() }
        val alertDialog = builder.create()
        alertDialog.window.setGravity(Gravity.CENTER)
        alertDialog.show()
    }

    fun showProgressDialog(message: String) {
        var str = message
        if (!loadDialog.isShowing) {
            if (TextUtils.isEmpty(str)) {
                str = "请等待..."
            }
            loadDialog.setMessage(str)
            loadDialog.setCancelable(false)
            loadDialog.setCanceledOnTouchOutside(false)
            loadDialog.window.setGravity(Gravity.CENTER)
            loadDialog.show()
        }
    }

    fun dismissProgressDialog() {
        if (loadDialog.isShowing) {
            loadDialog.dismiss()
        }
    }

    private fun playVoice() {
        val am = getSystemService(Context.AUDIO_SERVICE) as AudioManager
        val audioMaxVolumn = am.getStreamMaxVolume(AudioManager.STREAM_MUSIC).toFloat()
        val audioCurrentVolumn = am.getStreamVolume(AudioManager.STREAM_MUSIC).toFloat()
        val volumnRatio = audioCurrentVolumn / audioMaxVolumn
        soundPool.play(soundId, volumnRatio, volumnRatio, 1, 0, 1f)
    }
}
