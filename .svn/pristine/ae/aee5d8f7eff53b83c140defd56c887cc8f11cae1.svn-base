package com.midea.fridge.pad.settings;

import android.content.Context;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.text.InputType;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.midea.fridge.pad.BaseActivity;
import com.midea.fridge.pad.R;
import com.midea.fridge.pad.eventbus.WifiConfigurationObj;
import com.midea.fridge.pad.util.LogUtils;
import com.midea.fridge.pad.util.Utils;

import de.greenrobot.event.EventBus;

/**
 * 输入自定义Wifi名称和密码
 * Created by chenxiaofei on 2016/04/27.
 */
public class WifiCustomActivity extends BaseActivity implements View.OnClickListener {
    private static final String TAG = "WifiCustomActivity";

    private EditText mNameInput;
    private Spinner mEncryptSpinner;
    private EditText mPasswordInput;
    private ImageView mPwdShowBtn;
    private View mPwdShowBtnWrapper;
    private View mWifiConnectBtn;
    private View mWifiCancelBtn;

    private Context mContext;
    private WifiManager mWifiManager;
    private ArrayAdapter<String> mEncryptSpinnerAdapter = null;
    private static final String [] mEncryptType = {"开放", "WPA/WPA2 PSK", "WEP"};

    private static final String TEXT_MUST_INPUT_NAME = "必须输入网络名称";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.setting_wifi_custom_connect);

        mContext = this;
        mWifiManager = (WifiManager) mContext.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        initView();
        updatePasswordInput();
    }

    @Override
    public void onClick(View view) {
        Utils.collapseSoftInputMethod(mContext);
        switch (view.getId()) {
            case R.id.wifiConnectBtn:
                String ssid = mNameInput.getText().toString();
                String type = (String) mEncryptSpinner.getSelectedItem();
                String password = mPasswordInput.getText().toString();
                connectNet(ssid, password, type);
                break;
            case R.id.wifiCancelBtn:
                finish();
                break;
            case R.id.pwdShowBtn:
                mPwdShowBtn.setSelected(!mPwdShowBtn.isSelected());
                if(mPwdShowBtn.isSelected()) {
                    mPwdShowBtn.setImageResource(R.drawable.wifi_custom_pwd_show_true);
                    mPasswordInput.setInputType(InputType.TYPE_CLASS_TEXT|InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD);
                } else {
                    mPwdShowBtn.setImageResource(R.drawable.wifi_custom_pwd_show_false);
                    mPasswordInput.setInputType(InputType.TYPE_CLASS_TEXT|InputType.TYPE_TEXT_VARIATION_PASSWORD);
                }
                break;
        }
    }

    private void initView() {
        mNameInput = (EditText) findViewById(R.id.nameInput);
        mNameInput.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                LogUtils.Logi(TAG, "onEditorAction, actionId:" + actionId);
                switch (actionId) {
                    case EditorInfo.IME_ACTION_DONE:
                        Utils.collapseSoftInputMethod(mContext);
                        break;
                }
                return true;
            }
        });
        mPasswordInput = (EditText) findViewById(R.id.passwordInput);
        mPasswordInput.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                LogUtils.Logi(TAG, "onEditorAction, actionId:" + actionId);
                switch (actionId) {
                    case EditorInfo.IME_ACTION_DONE:
                        Utils.collapseSoftInputMethod(mContext);
                        break;
                }
                return true;
            }
        });
        mPwdShowBtn = (ImageView) findViewById(R.id.pwdShowBtn);
        mPwdShowBtn.setOnClickListener(this);
        mPwdShowBtnWrapper = findViewById(R.id.pwdShowBtnWrapper);
        mWifiConnectBtn = findViewById(R.id.wifiConnectBtn);
        mWifiConnectBtn.setOnClickListener(this);
        mWifiCancelBtn = findViewById(R.id.wifiCancelBtn);
        mWifiCancelBtn.setOnClickListener(this);

        mEncryptSpinner = (Spinner) findViewById(R.id.encryptSpinner);
        mEncryptSpinnerAdapter = new ArrayAdapter<>(this, R.layout.setting_wifi_custom_connect_spinner_item,mEncryptType);
        //设置下拉列表风格
        mEncryptSpinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        //将适配器添加到spinner中去
        mEncryptSpinner.setAdapter(mEncryptSpinnerAdapter);
        mEncryptSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                updatePasswordInput();
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }

    private void connectNet(String ssid, String password, String type) {
        LogUtils.Logi(TAG, "connectNet, ssid is " + ssid);
        if(TextUtils.isEmpty(ssid)) {
            LogUtils.Logw(TAG, "must input ssid");
            Toast.makeText(mContext, TEXT_MUST_INPUT_NAME, Toast.LENGTH_SHORT).show();
            return;
        }


        WifiUtils.removeNetwork(mWifiManager, ssid);
        WifiConfiguration wifiConfiguration = WifiUtils.createWifiConfiguration(ssid, password, type);
        WifiConfigurationObj obj = new WifiConfigurationObj();
        obj.config = wifiConfiguration;
        obj.password = password;
        EventBus.getDefault().post(obj);
        finish();
    }

    /**显示或隐藏密码输入*/
    private void updatePasswordInput() {
        String type = (String) mEncryptSpinner.getSelectedItem();
        if("开放".equals(type)) {
            mPwdShowBtnWrapper.setVisibility(View.GONE);
            mPasswordInput.setVisibility(View.GONE);
        } else {
            mPwdShowBtnWrapper.setVisibility(View.VISIBLE);
            mPasswordInput.setVisibility(View.VISIBLE);
        }
    }
}
