package com.midea.fridge.pad.settings;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Bundle;
import android.view.Gravity;
import android.view.View;
import android.widget.ImageView;

import com.midea.fridge.pad.BaseActivity;
import com.midea.fridge.pad.BuildConfig;
import com.midea.fridge.pad.R;
import com.midea.fridge.pad.config.FridgeConfigUtil;
import com.midea.fridge.pad.padslkData.ExtendDataObj;
import com.midea.fridge.utils.fridgecontrolutil.FridgeControlUtil;
import com.midea.fridge.utils.fridgecontrolutil.FridgeExtendStatus;
import com.midea.fridge.utils.fridgecontrolutil.FridgeStatus;
import com.midea.fridge.utils.fridgecontrolutil.OnControlListener;

import java.util.Timer;
import java.util.TimerTask;

import de.greenrobot.event.EventBus;

/**
 * Created by Administrator on 2016/5/12.
 */
public class DeveloperActivity extends BaseActivity implements View.OnClickListener {

    private ImageView mForceSwitch, mShowSwitch;
    private ImageView mDefrostingSwitch, mDefrostingSwitch2, mDefrostingSwitch3, mDefrostingSwitch4;
    private boolean mIsDefors, mIsDefors2, mIsDefors3, mIsDefors4;
    private boolean mIsForcerun;
    private Timer timer;
    private TimerTask task;
    private boolean mIsShow;
    private SoundPool soundPool;
    private int soundId;

    private OnControlListener<FridgeExtendStatus> onControlListener = new OnControlListener<FridgeExtendStatus>() {
        @Override
        public void onControlResponse(FridgeExtendStatus fridgeExtendStatus) {
            dismissProgressDialog();
            mIsDefors = fridgeExtendStatus.isForceDefrostingAll();
            mIsDefors2 = fridgeExtendStatus.isForceDefrostingFreeze();
            mIsDefors3 = fridgeExtendStatus.isForceDefrostingCool();
            mIsDefors4 = fridgeExtendStatus.isForceDefrostingVary();
            mIsForcerun = fridgeExtendStatus.isForceRun();
            refreshView();
        }

        @Override
        public void onControlTimeout() {
            dismissProgressDialog();
        }

        @Override
        public void onControlException() {
            dismissProgressDialog();
        }
    };

    private OnControlListener<FridgeStatus> onFridgeListener = new OnControlListener<FridgeStatus>() {
        @Override
        public void onControlResponse(FridgeStatus fridgeStatus) {
            dismissProgressDialog();
            mIsShow = fridgeStatus.isShowMode();
            playVoice();
            mShowSwitch.setBackgroundResource(mIsShow ? R.drawable.developer_open : R.drawable.developer_close);
        }

        @Override
        public void onControlTimeout() {

        }

        @Override
        public void onControlException() {

        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_developer);
        EventBus.getDefault().register(this);
        showProgressDialog("", null);
        soundPool = new SoundPool(1, AudioManager.STREAM_MUSIC, 100);
        soundId = soundPool.load(this, R.raw.beep, 1);
        initView();
        startTimer();// 轮询冰箱状态
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        EventBus.getDefault().unregister(this);
    }

    private void initView() {
        mForceSwitch = (ImageView) findViewById(R.id.force_switch);
        mForceSwitch.setOnClickListener(this);

        mDefrostingSwitch = (ImageView) findViewById(R.id.defrosting_switch);
        mDefrostingSwitch2 = (ImageView) findViewById(R.id.defrosting2_switch);
        mDefrostingSwitch3 = (ImageView) findViewById(R.id.defrosting3_switch);
        mDefrostingSwitch4 = (ImageView) findViewById(R.id.defrosting4_switch);
        mDefrostingSwitch.setOnClickListener(this);
        mDefrostingSwitch2.setOnClickListener(this);
        mDefrostingSwitch3.setOnClickListener(this);
        mDefrostingSwitch4.setOnClickListener(this);
        if(FridgeConfigUtil.getVaryRoomNum() == 0) {
            findViewById(R.id.defrosting4).setVisibility(View.GONE);
        }
        if("543".equals(BuildConfig.FLAVOR_model)) {
            findViewById(R.id.defrosting2).setVisibility(View.GONE);
            findViewById(R.id.defrosting3).setVisibility(View.GONE);
            findViewById(R.id.defrosting4).setVisibility(View.GONE);
        }

        mShowSwitch = (ImageView) findViewById(R.id.show_switch);
        mShowSwitch.setOnClickListener(this);

        findViewById(R.id.backBtn).setOnClickListener(this);
        findViewById(R.id.homeBtn).setOnClickListener(this);

        FridgeControlUtil.getInstance().queryFridgeExtendStatus(onControlListener);
        FridgeControlUtil.getInstance().queryFridgeStatus(onFridgeListener);
    }

    public void onEventMainThread(ExtendDataObj data) {
        dismissProgressDialog();
        mIsDefors = data.isDefors();
        mIsForcerun = data.isForcerun();
        refreshView();
    }

    private void refreshView() {
        mForceSwitch.setBackgroundResource(mIsForcerun ? R.drawable.developer_open : R.drawable.developer_close);
        mDefrostingSwitch.setBackgroundResource(mIsDefors ? R.drawable.developer_open : R.drawable.developer_close);
        mDefrostingSwitch2.setBackgroundResource(mIsDefors2 ? R.drawable.developer_open : R.drawable.developer_close);
        mDefrostingSwitch3.setBackgroundResource(mIsDefors3 ? R.drawable.developer_open : R.drawable.developer_close);
        mDefrostingSwitch4.setBackgroundResource(mIsDefors4 ? R.drawable.developer_open : R.drawable.developer_close);
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.force_switch:
                if (mIsDefors || mIsDefors2 || mIsDefors3 || mIsDefors4) {
                    showToast("关闭强制化霜后，才能进行此操作");
                } else {
                    if (mIsForcerun) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener);
                    } else {
                        FridgeControlUtil.getInstance().forceRun(onControlListener);
                    }
                    showProgressDialog("", null);
                }
                break;
            case R.id.defrosting_switch:
                if (mIsForcerun) {
                    showToast("关闭强制运行后，才能进行此操作");
                } else {
                    if (mIsDefors) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener);
                    } else {
                        FridgeControlUtil.getInstance().forceDefrosting(32, onControlListener);
                    }
                    showProgressDialog("", null);
                }
                break;
            case R.id.defrosting2_switch:
                if (mIsForcerun) {
                    showToast("关闭强制运行后，才能进行此操作");
                } else {
                    if (mIsDefors2) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener);
                    } else {
                        FridgeControlUtil.getInstance().forceDefrosting(4, onControlListener);
                    }
                    showProgressDialog("", null);
                }
                break;
            case R.id.defrosting3_switch:
                if (mIsForcerun) {
                    showToast("关闭强制运行后，才能进行此操作");
                } else {
                    if (mIsDefors3) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener);
                    } else {
                        FridgeControlUtil.getInstance().forceDefrosting(8, onControlListener);
                    }
                    showProgressDialog("", null);
                }
                break;
            case R.id.defrosting4_switch:
                if (mIsForcerun) {
                    showToast("关闭强制运行后，才能进行此操作");
                } else {
                    if (mIsDefors4) {
                        FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener);
                    } else {
                        FridgeControlUtil.getInstance().forceDefrosting(16, onControlListener);
                    }
                    showProgressDialog("", null);
                }
                break;
            case R.id.backBtn:
                if (mIsDefors || mIsDefors2 || mIsDefors3 || mIsDefors4) {
                    showDialog("强制化霜", false);
                } else if (mIsForcerun) {
                    showDialog("强制运行", false);
                } else {
                    endCount();
                    finish();
                }
                break;
            case R.id.homeBtn: {
                if (mIsDefors || mIsDefors2 || mIsDefors3 || mIsDefors4) {
                    showDialog("强制化霜", true);
                } else if (mIsForcerun) {
                    showDialog("强制运行", true);
                } else {
                    endCount();
                    finish();
                }
                break;
            }
            case R.id.show_switch:
                showProgressDialog("", null);
                if(mIsShow){
                    FridgeControlUtil.getInstance().setShow(0, onFridgeListener);
                }else{
                    FridgeControlUtil.getInstance().setShow(1, onFridgeListener);
                }

                break;
        }
    }

    private void showDialog(String message, final boolean home) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setMessage("确认退出吗？如果退出则停止" + message);
        builder.setTitle("提示");
        builder.setPositiveButton("确认", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                endCount();
                FridgeControlUtil.getInstance().disableDefrostingAndRun(onControlListener);
                dialog.dismiss();
                if (home) {
                    Intent i = new Intent(Intent.ACTION_MAIN);
                    i.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    i.addCategory(Intent.CATEGORY_HOME);
                    startActivity(i);
                }
                finish();
            }
        });
        builder.setNegativeButton("取消", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        AlertDialog alertDialog = builder.create();
        alertDialog.getWindow().setGravity(Gravity.CENTER);
        alertDialog.show();
    }

    private void startTimer() {
        if (timer == null) {
            timer = new Timer();
        }
        if (task == null) {
            task = new TimerTask() {
                @Override
                public void run() {
                    FridgeControlUtil.getInstance().queryFridgeExtendStatus(onControlListener);
                }
            };
        }
        try {
            timer.schedule(task, 0, 60000);
        } catch (IllegalStateException exception) {
        }
    }

    private void endCount() {
        if (timer != null) {
            timer.cancel();
            timer = null;
        }

        if (task != null) {
            task.cancel();
            task = null;
        }
    }

    private void playVoice()
    {
        AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
        float audioMaxVolumn = am.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
        float audioCurrentVolumn = am.getStreamVolume(AudioManager.STREAM_MUSIC);
        float volumnRatio = audioCurrentVolumn / audioMaxVolumn;
        soundPool.play(soundId, volumnRatio, volumnRatio, 1, 0, 1);
    }
}
