package com.midea.fridgesettings

import android.bluetooth.BluetoothAdapter
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.util.Log
import kotlinx.android.synthetic.main.fragment_bluetooth.*


/**
 * Created by chenjian on 6/1/17.
 */
class BluetoothFragment(type: FragmentTag) : BaseFragment(type) {

    private var mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter()

    private val bluetoothStateReveicer = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            val state = intent?.getIntExtra(BluetoothAdapter.EXTRA_STATE,
                    BluetoothAdapter.ERROR)
            when (state) {
                BluetoothAdapter.STATE_OFF -> {
                    tv_bluetoothState.text = getText(R.string.bluetoothOff)
                    sw_bluetooth.switch.isEnabled = true
                }
                BluetoothAdapter.STATE_TURNING_OFF -> {
                    sw_bluetooth.switch.isEnabled = false
                    tv_bluetoothState.text = getText(R.string.bluetoothTurningOff)
                }
                BluetoothAdapter.STATE_ON -> {
                    tv_bluetoothState.text = "${getText(R.string.bluetoothDeviceName)}BDC-543WKZV(E)ã€‚"
                    sw_bluetooth.switch.isEnabled = true
                }
                BluetoothAdapter.STATE_TURNING_ON -> {
                    sw_bluetooth.switch.isEnabled = false
                    tv_bluetoothState.text = getText(R.string.bluetoothTurningOn)
                }
            }
        }
    }

    override fun getContentViewLayoutId(): Int = R.layout.fragment_bluetooth

    override fun initViewsAndEvents() {
        super.initViewsAndEvents()
        sw_bluetooth.switch.setOnCheckedChangeListener { buttonView, isChecked ->
            val isEnabled = mBluetoothAdapter.isEnabled
            if (isChecked && !isEnabled) {
                mBluetoothAdapter.enable()
            } else if (!isChecked && isEnabled) {
                mBluetoothAdapter.disable()
            }
        }
    }

    override fun onUserVisible() {
        super.onUserVisible()
        sw_bluetooth.switch.isChecked = mBluetoothAdapter.isEnabled
        registerReceiver()
    }

    override fun onUserInvisible() {
        super.onUserInvisible()
        unRegisterReceiver()
    }

    override fun destroyViewAndThing() {
        super.destroyViewAndThing()
        unRegisterReceiver()
    }

    private fun registerReceiver() {
        val filter = IntentFilter()
        filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED)
        context.registerReceiver(bluetoothStateReveicer, filter)
    }

    private fun unRegisterReceiver() {
        try {
            context.unregisterReceiver(bluetoothStateReveicer)
        } catch (e: IllegalArgumentException) {
            Log.w("Bluetooth", "The broadcast has been canceled")
        }
    }
}