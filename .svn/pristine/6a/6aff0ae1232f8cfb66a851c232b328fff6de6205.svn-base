package com.midea.fridge.pad.util;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Rect;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.PowerManager;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;

import com.midea.fridge.pad.AWEApplication;
import com.midea.fridge.pad.countdrug.DrugTime;
import com.midea.fridge.pad.settings.NetNoneActivity;
import com.midea.fridge.pad.update.AES128;
import com.midea.fridge.utils.accountutil.AccountUtil;
import com.midea.fridge.utils.accountutil.LoginInfo;
import com.midea.fridge.utils.accountutil.UserData;

import java.security.MessageDigest;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;

/**
 * Created by Administrator on 2016/1/6.
 */
public class Utils {
    private static final String TAG = "Utils";
    private static long lastClickTime;

    public static byte intToHexString(int a) {
        int len = 1;
        len <<= 1;
        String hexString = Integer.toHexString(a);
        int b = len - hexString.length();
        if (b > 0) {
            for (int i = 0; i < b; i++) {
                hexString = "0" + hexString;
            }
        }
        return Byte.decode("0x" + hexString);
    }

    public static String byte2String(byte[] bytes, int length) {
        StringBuffer buff = new StringBuffer();
        for (int i = 0; i < length - 1; i++) {
            buff.append(String.format("%02X,", bytes[i]));
        }
        buff.append(String.format("%02X", bytes[length - 1]));
        return buff.toString();
    }

    public static int[] createSendData(byte commandType, int[] body) {//组合发送包
        int[] bodybytes = body;
        byte[] bytes = new byte[11];
        bytes[0] = (byte) 0xAA;
        bytes[1] = Utils.intToHexString(body.length + 10);
        bytes[2] = (byte) 0xCA;
        bytes[3] = (byte) (bytes[1] ^ bytes[2]);
        bytes[4] = (byte) 0x00;
        bytes[5] = (byte) 0x00;
        bytes[6] = (byte) 0x00;
        bytes[7] = (byte) 0x00;
        bytes[8] = (byte) 0x00;
        bytes[9] = commandType;
        byte tempBy = (byte) (bytes[1] + bytes[2] + bytes[3] + bytes[4] + bytes[5]
                + bytes[6] + bytes[7] + bytes[8] + bytes[9]);
        for (int i = 0; i < bodybytes.length; i++) {
            tempBy += bodybytes[i];
        }
        bytes[10] = (byte) (tempBy ^ (byte) 0xff);
        int[] reByte = new int[bodybytes.length + 11];
        for (int i = 0; i < 10; i++) {
            reByte[i] = bytes[i];
        }
        for (int j = 10; j < 10 + bodybytes.length; j++) {
            reByte[j] = bodybytes[j - 10];
        }
        reByte[bodybytes.length + 10] = (byte) (bytes[10] + 1);
        return reByte;
    }

    public static String getWeatherDetailTime(String date) {
        String[] dates = date.split("-");
        if (dates.length == 3) {
            return dates[1] + "月" + dates[2] + "日";
        } else {
            return null;
        }
    }

    public static String getWeatherFutureTime(String date) {
        try{
            String[] day = date.split(" ");
            String[] dates = day[0].split("-");
            if (dates.length == 3) {
                return dates[1] + "/" + dates[2];
            } else {
                return "";
            }
        }catch(Exception e){
            return "";
        }
    }

    public static String getTime() {
        SimpleDateFormat format = new SimpleDateFormat("HH:mm");
        String t = format.format(new Date());
        return t;
    }

    public static String getFullTime(Date date) {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String t = format.format(date);
        return t;
    }

    public static String getFullTime() {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String t = format.format(new Date());
        return t;
    }

    public static String getLogTime() {
        SimpleDateFormat format = new SimpleDateFormat("MM-dd HH:mm:ss");
        String t = format.format(new Date());
        return t;
    }

    public static String getDate() {
        SimpleDateFormat format = new SimpleDateFormat("MM月dd日");
        String t = format.format(new Date());
        return t;
    }

    public static String getWeek() {
        String mWay;
        final Calendar c = Calendar.getInstance();
        c.setTimeZone(TimeZone.getTimeZone("GMT+8:00"));
        mWay = String.valueOf(c.get(Calendar.DAY_OF_WEEK));
        if ("1".equals(mWay)) {
            mWay = "天";
        } else if ("2".equals(mWay)) {
            mWay = "一";
        } else if ("3".equals(mWay)) {
            mWay = "二";
        } else if ("4".equals(mWay)) {
            mWay = "三";
        } else if ("5".equals(mWay)) {
            mWay = "四";
        } else if ("6".equals(mWay)) {
            mWay = "五";
        } else if ("7".equals(mWay)) {
            mWay = "六";
        }
        return "星期" + mWay;
    }

    public static String MD5(String plainText) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(plainText.getBytes("utf-8"));
            byte b[] = md.digest();
            int i;
            StringBuffer buf = new StringBuffer("");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0)
                    i += 256;
                if (i < 16)
                    buf.append("0");
                buf.append(Integer.toHexString(i));
            }
            return buf.toString().toUpperCase();
        } catch (Exception e) {
            return null;
        }
    }

    public static String MD5_small(String plainText) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(plainText.getBytes("utf-8"));
            byte b[] = md.digest();
            int i;
            StringBuffer buf = new StringBuffer("");
            for (int offset = 0; offset < b.length; offset++) {
                i = b[offset];
                if (i < 0)
                    i += 256;
                if (i < 16)
                    buf.append("0");
                buf.append(Integer.toHexString(i));
            }
            return buf.toString();
        } catch (Exception e) {
            return null;
        }
    }

    /**判断是否快速点击多次*/
    public static boolean isFastDoubleClick() {
        long time = System.currentTimeMillis();
        long timeD = time - lastClickTime;
        if ( 0 < timeD && timeD < 800) {
            return true;
        }
        lastClickTime = time;
        return false;
    }

    public static boolean isPhone(String phone) {
        if (TextUtils.isEmpty(phone)) {
            return false;
        } else if (phone.length() != 11) {
            return false;
        } else if (!phone.startsWith("1")) {
            return false;
        } else {
            return true;
        }
    }

    public static boolean isPwd(String pwd) {
        return pwd.matches("^[a-zA-Z0-9]{6,20}$");
    }

    public static boolean isLogin() {
        LoginInfo loginInfo = AccountUtil.getInstance().getLoginInfo();
        if(null != loginInfo) {
            return true;
        }
        return false;
    }

    public static final String getUserName(UserData userData){//用户名——>邮箱——>手机号——>QQ昵称——>微博昵称——>微信昵称
        String userName = userData.nickname;
        if(userName==null||userName.equals(""))
        {
            if(userData.email!=null&&!userData.email.equals(""))
            {
                userName=userData.email;
            }
            else if(userData.mobile!=null&&!userData.mobile.equals(""))
            {
                userName=userData.mobile;
            }
            else if(userData.qq_nickname!=null&&!userData.qq_nickname.equals(""))
            {
                userName=userData.qq_nickname;
            }
            else if(userData.wb_nickname!=null&&!userData.wb_nickname.equals(""))
            {
                userName=userData.wb_nickname;
            }else if(userData.wx_nickname!=null&&!userData.wx_nickname.equals(""))
            {
                userName=userData.wx_nickname;
            }
        }

        return userName;
    }

    /**
     * 检测当的网络（WLAN、3G/2G）状态
     * @param context Context
     * @return true 表示网络可用
     */
    public static boolean isNetworkAvailable(Context context) {
        ConnectivityManager connectivity = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        if (connectivity != null) {
            NetworkInfo info = connectivity.getActiveNetworkInfo();
            if (info != null && info.isConnected()) {
                // 当前网络是连接的
                if (info.getState() == NetworkInfo.State.CONNECTED) {
                    // 当前所连接的网络可用
                    return true;
                }
            }
        }
        return false;
    }

    /** 收起输入法 */
    public static void collapseSoftInputMethod(Context context){
        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);
        if (imm != null) {
            imm.hideSoftInputFromWindow(((Activity) context).getWindow().getDecorView().getWindowToken(), 0);
        }
    }

    public static String g2kg(int g){
        float num= (float)g / 1000;
        DecimalFormat df = new DecimalFormat("0.00");
        return df.format(num);
    }

    /**重启屏幕*/
    public static void reboot(Context context) {
        try {
            Intent intent = new Intent(Intent.ACTION_REBOOT);
            intent.putExtra("nowait", 1);
            intent.putExtra("interval", 1);
            intent.putExtra("window", 0);
            context.sendBroadcast(intent);
        } catch (Exception e) {
            LogUtils.Logw(TAG, "reboot fail");
        }
    }

    public static int getVerCode() {
        int verCode = 1;
        try {
            verCode = AWEApplication.mContext.getPackageManager().getPackageInfo(AWEApplication.mContext.getPackageName(), 0).versionCode;
        } catch (PackageManager.NameNotFoundException e) {
        }
        return verCode;
    }

    public static String getVersion(Activity activity) {
        try {
            PackageManager manager = activity.getPackageManager();
            PackageInfo info = manager.getPackageInfo(activity.getPackageName(), 0);
            return info.versionName;
        } catch (Exception e) {
            e.printStackTrace();
            return "1.0";
        }
    }

    /**
     * 判断添加药品的时间是否超过半个小时
     * @param time
     * @return
     */
    public static boolean canAddDrug(List<DrugTime> drugTimeList, String time, int position){
        try{
            Calendar nowCalendar = getCalendar(time);
            for(int i = 0; i < drugTimeList.size(); i++){
                if(i != position){
                    Calendar calendar = getCalendar(drugTimeList.get(i).time);
                    long distance = Math.abs((nowCalendar.getTime().getTime() - calendar.getTime().getTime()) / 1000 / 60);
                    if(distance < 30){
                        return false;
                    }
                }
            }
        }catch(Exception e){

        }
        return true;
    }

    private static Calendar getCalendar(String time){
        String t = time.split(" ")[1];
        String[] hm = t.split(":");
        int hours = Integer.parseInt(hm[0]);
        int min = Integer.parseInt(hm[1]);
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR, hours);
        calendar.set(Calendar.MINUTE, min);
        return calendar;
    }

    /**
     * 生成签名
     * @param params
     * @return
     */
    public static String getSign(Map<String, String> params){
        String result;
        StringBuffer r = new StringBuffer();
        Iterator<String> iter = params.keySet().iterator();
        while (iter.hasNext()) {
            String name = (String) iter.next();
            r.append(name).append(params.get(name));
        }
        try {
            result = AES128.encrypt(MD5_small(r.toString()), "20160613646aBcDW");
        } catch (Exception e) {
            throw new java.lang.RuntimeException("sign error !");
        }
        return result;
    }

    /**
     * 获取Mac地址
     * @param context
     * @return
     */
    public static String getMac(Context context) {
        WifiManager wifi = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
        WifiInfo info = wifi.getConnectionInfo();
        if(null == info) {
            return "";
        }
        return info.getMacAddress();
    }

    /**
     * 获取文件夹大小
     * @param file File实例
     * @return long 单位为byte
     * @throws Exception
     */
    public static long getFolderSize(java.io.File file) throws Exception {
        long size = 0;
        java.io.File[] fileList = file.listFiles();
        for (int i = 0; i < fileList.length; i++) {
            if (fileList[i].isDirectory()) {
                size = size + getFolderSize(fileList[i]);
            } else {
                size = size + fileList[i].length();
            }
        }
        return size;
    }

    public static String getRfidTime(long putTime){
        String tips = "";
        long interval = (System.currentTimeMillis() - putTime) / 1000 / 60;
        if(interval < 0){
            tips = "未知";
        }else if(interval == 0){
            tips = "刚刚识别";
        }else if(interval < 60){
            tips = interval + "分钟前识别";
        }else if(interval < 60 * 24){
            tips = (interval / 60) + "小时前识别";
        }else{
            tips = (interval / 60 / 24) + "天前识别";
        }
        return tips;
    }

    /**
     * 读取application 节点  meta-data 信息
     */
    public static String readMetaDataFromApplication(String key) {
        try {
            ApplicationInfo appInfo = AWEApplication.mContext.getPackageManager().getApplicationInfo(AWEApplication.mContext.getPackageName(),
                    PackageManager.GET_META_DATA);
            String tag = appInfo.metaData.getString(key);
            return tag;
        } catch (Exception e) {
        }
        return "";
    }

    /**
     * 获取控件的坐标信息
     */
    public static Rect locateView(View v) {
        int[] loc_int = new int[2];
        if (v == null) return null;
        try {
            v.getLocationOnScreen(loc_int);
        } catch (NullPointerException npe) {
            //Happens when the view doesn't exist on screen anymore.
            return null;
        }
        Rect location = new Rect();
        location.left = loc_int[0];
        location.top = loc_int[1];
        location.right = location.left + v.getWidth();
        location.bottom = location.top + v.getHeight();
        return location;
    }

    public static String getLogFileTime() {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-ddHH-mm-ss");
        String t = format.format(new Date());
        return t;
    }

    /**
     * 开启或关闭蓝牙
     * @param enable
     * @return
     */
    public static boolean setBluetooth(boolean enable) {
        BluetoothAdapter bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        boolean isEnabled = bluetoothAdapter.isEnabled();
        if (enable && !isEnabled) {
            return bluetoothAdapter.enable();
        }
        else if(!enable && isEnabled) {
            return bluetoothAdapter.disable();
        }
        // No need to change bluetooth state
        return true;
    }

    public static String join(String[] array, String var1) {
        StringBuffer var2 = new StringBuffer();
        for(String str : array){
            var2.append(str);
            if(var2.length() != 0) {
                var2.append(var1);
            }
        }
        return var2.toString();
    }

    public static int getScreenWidth(Context context){
        WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);

        return wm.getDefaultDisplay().getWidth();
    }

    public static int getScreenHeight(Context context){
        WindowManager wm = (WindowManager) context
                .getSystemService(Context.WINDOW_SERVICE);

        return wm.getDefaultDisplay().getHeight();
    }

    public static String getWeekByDateStr(String strDate)
    {
        String week = "";
        try {
            int year = Integer.parseInt(strDate.substring(0, 4));
            int month = Integer.parseInt(strDate.substring(5, 7));
            int day = Integer.parseInt(strDate.substring(8, 10));
            Calendar c = Calendar.getInstance();
            c.set(Calendar.YEAR, year);
            c.set(Calendar.MONTH, month - 1);
            c.set(Calendar.DAY_OF_MONTH, day);

            int weekIndex = c.get(Calendar.DAY_OF_WEEK);

            switch (weekIndex)
            {
                case 1:
                    week = "星期天";
                    break;
                case 2:
                    week = "星期一";
                    break;
                case 3:
                    week = "星期二";
                    break;
                case 4:
                    week = "星期三";
                    break;
                case 5:
                    week = "星期四";
                    break;
                case 6:
                    week = "星期五";
                    break;
                case 7:
                    week = "星期六";
                    break;
            }
        }catch(Exception e){

        }
        return week;
    }

    public static String getLunarMonth() {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH) + 1;
        int day = calendar.get(Calendar.DAY_OF_MONTH);
        int[] lunarDate = LunarCalendar.solarToLunar(year, month, day);
        return LunarCalendar.lunarMonth[lunarDate[1] - 1] + LunarCalendar.lunarDay[lunarDate[2] - 1];
    }

    public static boolean showNetNoneActivity(Context context) {
        if(!isNetworkAvailable(context)) {
            Intent intent = new Intent(context, NetNoneActivity.class);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(intent);
            return true;
        }
        return false;
    }

    /** 屏幕当前是否点亮 */
    public static boolean isScreenOn() {
        PowerManager pm = (PowerManager) AWEApplication.mContext.getSystemService(Context.POWER_SERVICE);
        boolean screen = Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH && pm.isInteractive() || Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT_WATCH && pm.isScreenOn();
        Log.v("sstang", "isScreenOn:" + screen);
        return screen;
    }
}
