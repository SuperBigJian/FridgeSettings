package com.midea.fridgesettings

import android.app.Activity
import android.os.Handler
import android.os.Message
import android.util.Log
import android.view.View
import android.view.animation.Animation
import android.view.animation.AnimationUtils
import android.view.animation.LinearInterpolator
import com.midea.fridge.utils.config.FridgeConfigUtil
import com.midea.fridge.utils.update.FridgeUpdateUtil
import com.midea.update.RomDownLoadListener
import com.midea.update.UpGradeListener
import kotlinx.android.synthetic.main.fragment_update.*
import org.jetbrains.anko.sdk25.coroutines.onClick
import org.jetbrains.anko.textResource
import java.lang.ref.WeakReference

/**
 * Created by chenjian on 6/1/17.
 */
class UpdateFragment(type: FragmentTag) : BaseFragment(type) {
    private val TAG = "UpdateFragment"
    private val REFRESH_UPDATE_UI = 1000
    private val UPDATE_READY = 1010
    private val UPDATE_NOT_READY = 1020
    private val NO_UPDATE = 1030
    private val UPDATE_ERROR = 1040
    private val REFRESH_DOWNLOAD_UI = 2000
    private val DOWNLOAD_START = 2010
    private val DOWNLOAD_PROGRESS = 2020
    private val DOWNLOAD_FINISH = 2030
    private val DOWNLOAD_ERROR = 2040
    private val update = FridgeUpdateUtil.getInstance()
    private val checkListener by lazy { CheckUpdateListener() }
    private var downloadListener: DownloadListener? = null
    private var downloadUrl: String = ""
    private var curState: Int = 0
    private var totalSize: Int = 100
    private var progressSize: Int = 0

    private val handler = object : Handler() {

        val mWeakActivity: WeakReference<Activity> by lazy { WeakReference(activity) }

        override fun handleMessage(msg: Message?) {
            if (mWeakActivity.get() == null || downloadListener ==null) return
            when (msg?.what) {
                REFRESH_UPDATE_UI -> {
                    refreshUpdateUI(msg.arg1)
                }
                REFRESH_DOWNLOAD_UI -> {
                    refreshDownLoadUI(msg.arg1)
                }
            }
        }
    }

    override fun getContentViewLayoutId(): Int = R.layout.fragment_update

    override fun initViewsAndEvents() {
        super.initViewsAndEvents()
        if (downloadListener == null) {
            downloadListener = DownloadListener()
        }
        initView()
        checkForUpdate()
    }

    private fun initView() {
        device.text = FridgeConfigUtil.getInstance().fullName
        version.text = android.os.Build.DISPLAY
        btUpdate.visibility = View.VISIBLE
        btUpdate.onClick { updateBTAction() }
    }

    private fun checkForUpdate() {
        iv_check.visibility = View.VISIBLE
        iv_check.animation = getLoadingAnimation()
        btUpdate.isEnabled = false
        update.checkState(checkListener)
    }

    override fun onUserVisible() {
        super.onUserVisible()
    }

    override fun onUserInvisible() {
        super.onUserInvisible()
    }

    private fun getLoadingAnimation(): Animation {
        val loadingAnim = AnimationUtils.loadAnimation(context, R.anim.am_wifi_laoding)
        loadingAnim.interpolator = LinearInterpolator()
        return loadingAnim
    }

    private fun refreshUpdateUI(state: Int) {
        Log.d(TAG, "refreshUpdateUI $state ")
        tv_curState.visibility = View.VISIBLE
        iv_check.clearAnimation()
        iv_check.visibility = View.INVISIBLE
        btUpdate.isEnabled = true
        when (state) {
            UPDATE_READY -> {
                curState = UPDATE_READY
                tv_curState.textResource = R.string.you_can_update_now
                btUpdate.textResource = R.string.update
                val tab = fragmentManager.findFragmentById(R.id.tabFragment)
                if (tab is TabFragment) {
                    tab.hasUpdate = true
                }
            }

            UPDATE_NOT_READY -> {
                curState = UPDATE_NOT_READY
                tv_curState.textResource = R.string.has_update_need_download
                btUpdate.textResource = R.string.download
            }

            NO_UPDATE -> {
                curState = NO_UPDATE
                tv_curState.textResource = R.string.no_update
                btUpdate.textResource = R.string.check_update
            }

            UPDATE_ERROR -> {
                curState = UPDATE_ERROR
                tv_curState.textResource = R.string.no_update
                btUpdate.textResource = R.string.check_update
            }
        }

    }

    private fun refreshDownLoadUI(arg: Int) {
        Log.d(TAG, "refreshDownLoadUI $arg ")
        tv_curState.visibility = View.VISIBLE
        when (arg) {
            DOWNLOAD_START -> {
                progress.max = totalSize
            }

            DOWNLOAD_PROGRESS -> {
                btUpdate.visibility = View.GONE
                progress.visibility = View.VISIBLE
                tv_curState.textResource = R.string.downloading
                progress.progress = progressSize
            }

            DOWNLOAD_FINISH -> {
                btUpdate.visibility = View.VISIBLE
                btUpdate.isEnabled = false
                progress.visibility = View.GONE
                tv_curState.textResource = R.string.check_rom
                checkForUpdate()
            }

            DOWNLOAD_ERROR -> {
                btUpdate.textResource = R.string.reDownload
                tv_curState.textResource = R.string.download_fail
            }
        }
    }

    private fun updateBTAction() {
        Log.d(TAG, "updateBTAction $curState")
        when (curState) {
            UPDATE_READY -> {
                update.startUpdate()
            }
            UPDATE_NOT_READY, DOWNLOAD_ERROR -> {
                update.downloadUpdateRom(downloadUrl, downloadListener)
            }
            else -> {
                checkForUpdate()
            }
        }
    }

    private inner class CheckUpdateListener : UpGradeListener.Stub() {
        override fun onHaveNewRom() {
            Log.d(TAG, "onHaveNewRom ")
            handler.obtainMessage()
            handler.sendMessage(handler.obtainMessage(REFRESH_UPDATE_UI, UPDATE_READY, -1))
        }

        override fun onDownloadNewRom(url: String?) {
            Log.d(TAG, "onDownloadNewRom ")
            downloadUrl = url ?: ""
            handler.sendMessage(handler.obtainMessage(REFRESH_UPDATE_UI, UPDATE_NOT_READY, -1))
        }

        override fun onNoNewRom() {
            Log.d(TAG, "onNoNewRom ")
            handler.sendMessage(handler.obtainMessage(REFRESH_UPDATE_UI, NO_UPDATE, -1))
        }

        override fun onFailed() {
            Log.d(TAG, "onFailed ")
            handler.sendMessage(handler.obtainMessage(REFRESH_UPDATE_UI, UPDATE_ERROR, -1))
        }
    }

    private inner class DownloadListener : RomDownLoadListener.Stub() {

        override fun onStart(fileSize: Int) {
            Log.d(TAG, "onStart ")
            totalSize = fileSize
            handler.sendMessage(handler.obtainMessage(REFRESH_DOWNLOAD_UI, DOWNLOAD_START, -1))
        }

        override fun onProgress(downLoadSize: Int, fileSize: Int) {
            Log.d(TAG, "onProgress ")
            if (totalSize != fileSize) {
                totalSize = fileSize
                progress.max = fileSize
            }
            progressSize = downLoadSize
            handler.sendMessage(handler.obtainMessage(REFRESH_DOWNLOAD_UI, DOWNLOAD_PROGRESS, -1))
        }

        override fun onFinish() {
            Log.d(TAG, "onFinish ")
            handler.sendMessage(handler.obtainMessage(REFRESH_DOWNLOAD_UI, DOWNLOAD_FINISH, -1))
        }

        override fun onError() {
            Log.d(TAG, "onError ")
            handler.sendMessage(handler.obtainMessage(REFRESH_DOWNLOAD_UI, DOWNLOAD_ERROR, -1))
        }
    }

    override fun destroyViewAndThing() {
        handler.removeCallbacksAndMessages(null)
        downloadListener = null
        super.destroyViewAndThing()
    }
}